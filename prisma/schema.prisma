// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String          @id @default(cuid())
    email          String          @unique
    name           String?
    password       String
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    profile        Profile?
    financialGoals FinancialGoal[]
    investments    Investment[]
    expenses       Expense[]
    savings        Saving[]
}

model Profile {
    id               String   @id @default(cuid())
    userId           String   @unique
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    currentAge       Int
    targetAge        Int
    currentIncome    Float
    targetNetWorth   Float
    selectedStrategy String // 'leanfire', 'fatfire', 'coastfire'
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}

model FinancialGoal {
    id            String   @id @default(cuid())
    userId        String
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    name          String
    targetAmount  Float
    currentAmount Float
    deadline      DateTime
    category      String // 'investment', 'saving', 'debt'
    status        String // 'pending', 'in_progress', 'completed'
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Investment {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    type        String // 'stocks', 'bonds', 'real_estate', 'crypto'
    amount      Float
    name        String
    description String?
    returnRate  Float?
    startDate   DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Expense {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    category    String // 'housing', 'food', 'transport', 'utilities'
    amount      Float
    name        String
    description String?
    date        DateTime
    isRecurring Boolean  @default(false)
    frequency   String? // 'monthly', 'yearly'
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Saving {
    id           String   @id @default(cuid())
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    amount       Float
    category     String // 'emergency', 'retirement', 'general'
    name         String
    description  String?
    targetAmount Float?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Strategy {
    id          String   @id @default(cuid())
    name        String   @unique // 'leanfire', 'fatfire', 'coastfire'
    description String
    minNetWorth Float
    maxNetWorth Float?
    timeRange   String // '7-15 years', '15-25 years'
    principles  String[] // Lista de principios
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
